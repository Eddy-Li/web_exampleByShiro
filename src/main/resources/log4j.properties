#配置根Logger
#log4j.rootLogger = [level],appenderName1(变量名输出源1),appenderName2(变量名输出源2),…
#
#日记级别 off > fatal > error > warn > info > debug > all
#只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。
#off  : 最高等级，关闭所有日志
#fatal:
#error: 常用
#warn :	常用
#info :	常用,正常信息
#debug:	常用,调试时打印的信息
#all  :	最低等级，打开所有日志
#开发时设为debug，上线时设为warn（info会影响性能）

#log4j.rootLogger=info,C,errorFile,infoFile
log4j.rootLogger=info,C
#log4j.rootLogger=info,C

#spring日志
#log4j.logger.org.springframework=debug

#mybatis日志
#log4j.logger.org.mybatis=debug



#log4j.appender.appenderName输出源设置：
#1.org.apache.log4j.ConsoleAppender（控制台） 常用
#	ConsoleAppender选项：
#		log4j.appender.appenderName.Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
#		log4j.appender.appenderName.ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
#		log4j.appender.appenderName.Target=System.err：默认值是System.out。
#
#2.org.apache.log4j.FileAppender（文件）
#
#3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件） 常用
#	DailyRollingFileAppender选项：
#		log4j.appender.appenderName.Threshold = WARN：指定日志信息的最低输出级别，默认为DEBUG。
#		log4j.appender.appenderName.ImmediateFlush = true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
#		log4j.appender.appenderName.Append = false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
#		log4j.appender.appenderName.File = D:/logs/logging.log4j：指定当前消息输出到logging.log4j文件中。
#		log4j.appender.appenderName.DatePattern='.'yyyy-MM：每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。
#		另外，也可以指定按周、天、时、分等来滚动日志文件，对应的格式如下：
#			1)'.'yyyy-MM：每月
#			2)'.'yyyy-ww：每周
#			3)'.'yyyy-MM-dd：每天
#			4)'.'yyyy-MM-dd-a：每天两次
#			5)'.'yyyy-MM-dd-HH：每小时
#			6)'.'yyyy-MM-dd-HH-mm：每分钟
#
#4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#
#5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.C=org.apache.log4j.ConsoleAppender
log4j.appender.C.Target=System.out
#layout布局设置：
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）  常用
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息
log4j.appender.C.layout=org.apache.log4j.PatternLayout
#
#ConversionPattern=%m%n：设定以怎样的格式显示消息
#	%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
#	%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
#	%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
#	%t：输出产生该日志事件的线程名。
#	%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
#	%c：输出日志信息所属的类目，通常就是所在类的全名。
#	%M：输出产生日志信息的方法名。
#	%F：输出日志消息产生时所在的文件名称。
#	%L:：输出代码中的行号。
#	%m:：输出代码中指定的具体日志信息。
#	%n：输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"。
#	%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
#	%%：输出一个"%"字符。
#	另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：
#		1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。
#		2)%-20c："-"号表示左对齐。
#		3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。
#log4j.appender.C.layout.ConversionPattern=[%-5p] %d thread:%t method:%l %n %m %n
log4j.appender.C.layout.ConversionPattern=[%-5p] %d %C:%m%n
##输出到文件中
#log4j.appender.errorFile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.errorFile.File=D:/examples/log/error/error.log
#log4j.appender.errorFile.Append=true
#log4j.appender.errorFile.Threshold=error
#log4j.appender.errorFile.DatePattern='.'yyyy-MM-dd
#log4j.appender.errorFile.layout=org.apache.log4j.PatternLayout
##log4j.appender.errorFile.layout.ConversionPattern=[%-5p] %d method:%l %n %m %n
#log4j.appender.errorFile.layout.ConversionPattern=%m %n
##输出到文件中
#log4j.appender.infoFile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.infoFile.File=D:/examples/log/info/info.log
#log4j.appender.infoFile.Append=true
#log4j.appender.infoFile.Threshold=info
#log4j.appender.infoFile.DatePattern='.'yyyy-MM-dd
#log4j.appender.infoFile.layout=org.apache.log4j.PatternLayout
##log4j.appender.infoFile.layout.ConversionPattern=[%-5p] %d method:%l %n %m %n
#log4j.appender.infoFile.layout.ConversionPattern=%m %n

